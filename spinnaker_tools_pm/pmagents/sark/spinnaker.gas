@
@ Auto-generated from "../include/spinnaker.h" - Fri May  6 17:03:16 2016
@
@ Indar: This is the modified version for pmagent

@------------------------------------------------------------------------------
@
@ spinnaker.h	    Header file describing SpiNNaker hardware
@
@ Copyright (C)    The University of Manchester - 2009-2013
@
@ Author           Steve Temple, APT Group, School of Computer Science
@ Email            temples@cs.man.ac.uk
@
@------------------------------------------------------------------------------

                .ifndef  __SPINNAKER_H__
@------------------------------------------------------------------------------

@ Type definitions for unsigned integers

@ Used in register offset definitions below

@ Miscellaneous...

                .ifndef  NULL
                .equ    NULL, 0                       @ Null pointer value
                .endif      

                .equ    BIT_31, 0x80000000              @ Bit number 31

@ Define BUF_WRITE to place all peripherals & memories in buffered write space

                .equ    BUF_WRITE, 1

@------------------------------------------------------------------------------

@ Numbers of CPUS, links

                .equ    NUM_CPUS, 18
                .equ    NUM_LINKS, 6

@------------------------------------------------------------------------------

@ Memory definitions
                .equ    ITCM_BASE, 0x00000000              @ Indar: this is the original
@#define ITCM_BASE		0x00005F00	// Indar: this is modified for pmagent
                .equ    ITCM_SIZE, 0x00008000              @ Indar: this is the original 32 KB
@#define ITCM_SIZE		0x00002000	// Indar: this is modified for pmagent (0x2000 = 8KB)
                .equ    ITCM_TOP, (ITCM_BASE + ITCM_SIZE) @ Indar: this is the original, what happens for pmagent?

                .equ    DTCM_BASE, 0x00400000              @ Indar: the original is the same for pmagent
@#define DTCM_SIZE		0x00010000	// Indar: this is the original (64 KB)
                .equ    DTCM_SIZE, 0x00010000              @ Indar: for pmagent with 2KB of data and 2KB of stack (the stack is included here!)
                .equ    DTCM_TOP, (DTCM_BASE + DTCM_SIZE) @ Indar: so, what will happen with this setting?

                .equ    SDRAM_BASE_UNBUF, 0x70000000
                .equ    SDRAM_BASE_BUF, 0x60000000

                .ifdef  BUF_WRITE
                .equ    SDRAM_BASE, SDRAM_BASE_BUF
                .else       
                .equ    SDRAM_BASE, SDRAM_BASE_UNBUF
                .endif      

                .equ    SDRAM_SIZE, (128 * 1024 * 1024)     @ 128 MB
                .equ    SDRAM_TOP, (SDRAM_BASE + SDRAM_SIZE)

                .equ    SYSRAM_BASE_UNBUF, 0xf5000000
                .equ    SYSRAM_BASE_BUF, 0xe5000000

                .ifdef  BUF_WRITE
                .equ    SYSRAM_BASE, SYSRAM_BASE_BUF
                .else       
                .equ    SYSRAM_BASE, SYSRAM_BASE_UNBUF
                .endif      

                .equ    SYSRAM_SIZE, 0x00008000              @ 32 KB
                .equ    SYSRAM_TOP, (SYSRAM_BASE + SYSRAM_SIZE)

                .equ    ROM_BASE, 0xf6000000
                .equ    ROM_SIZE, 0x00008000              @ 32 KB
                .equ    ROM_TOP, (ROM_BASE + ROM_SIZE)

@------------------------------------------------------------------------------

@ Comms controller definitions

                .equ    CC_BASE_UNBUF, 0x10000000              @ Unbuffered
                .equ    CC_BASE_BUF, 0x20000000              @ Buffered

                .ifdef  BUF_WRITE
                .equ    CC_BASE, CC_BASE_BUF
                .else       
                .equ    CC_BASE, CC_BASE_UNBUF
                .endif      

                .equ    CC_TCR, 0x00
                .equ    CC_TXDATA, 0x04
                .equ    CC_TXKEY, 0x08
                .equ    CC_RSR, 0x0c
                .equ    CC_RXDATA, 0x10
                .equ    CC_RXKEY, 0x14
                .equ    CC_SAR, 0x18
                .equ    CC_TEST, 0x1c

@------------------------------------------------------------------------------

@ Timer definitions

                .equ    TIMER_BASE_UNBUF, 0x11000000
                .equ    TIMER_BASE_BUF, 0x21000000

                .ifdef  BUF_WRITE
                .equ    TIMER_BASE, TIMER_BASE_BUF
                .else       
                .equ    TIMER_BASE, TIMER_BASE_UNBUF
                .endif      

                .equ    TIMER_OFFSET, 0x20                    @ Offset of second timer

                .equ    TIMER1_BASE, (TIMER_BASE)
                .equ    TIMER2_BASE, (TIMER_BASE + TIMER_OFFSET)

                .equ    TC_LOAD, 0x00
                .equ    TC_COUNT, 0x04
                .equ    TC_CONTROL, 0x08
                .equ    TC_INT_CLR, 0x0c
                .equ    TC_RAW_INT, 0x10
                .equ    TC_MASK_INT, 0x14
                .equ    TC_BG_LOAD, 0x18

                .equ    T1_LOAD, 0x00
                .equ    T1_COUNT, 0x04
                .equ    T1_CONTROL, 0x08
                .equ    T1_INT_CLR, 0x0c
                .equ    T1_RAW_INT, 0x10
                .equ    T1_MASK_INT, 0x14
                .equ    T1_BG_LOAD, 0x18

                .equ    T2_LOAD, 0x20
                .equ    T2_COUNT, 0x24
                .equ    T2_CONTROL, 0x28
                .equ    T2_INT_CLR, 0x2c
                .equ    T2_RAW_INT, 0x30
                .equ    T2_MASK_INT, 0x34
                .equ    T2_BG_LOAD, 0x38

@------------------------------------------------------------------------------

@ VIC definitions

                .equ    VIC_BASE_UNBUF, 0x1f000000
                .equ    VIC_BASE_BUF, 0x2f000000

                .ifdef  BUF_WRITE
                .equ    VIC_BASE, VIC_BASE_BUF
                .else       
                .equ    VIC_BASE, VIC_BASE_UNBUF
                .endif      

                .equ    VIC_IRQST, 0x00
                .equ    VIC_FIQST, 0x04
                .equ    VIC_RAW, 0x08
                .equ    VIC_SELECT, 0x0c
                .equ    VIC_ENABLE, 0x10
                .equ    VIC_DISABLE, 0x14
                .equ    VIC_SOFT_SET, 0x18
                .equ    VIC_SOFT_CLR, 0x1c
                .equ    VIC_PROTECT, 0x20
                .equ    VIC_VADDR, 0x30
                .equ    VIC_DEFADDR, 0x34

                .equ    VIC_ADDR, 0x100

                .equ    VIC_ADDR0, 0x100
                .equ    VIC_ADDR1, 0x104
                .equ    VIC_ADDR2, 0x108
                .equ    VIC_ADDR3, 0x10c
                .equ    VIC_ADDR4, 0x110
                .equ    VIC_ADDR5, 0x114
                .equ    VIC_ADDR6, 0x118
                .equ    VIC_ADDR7, 0x11c
                .equ    VIC_ADDR8, 0x120
                .equ    VIC_ADDR9, 0x124
                .equ    VIC_ADDR10, 0x128
                .equ    VIC_ADDR11, 0x12c
                .equ    VIC_ADDR12, 0x130
                .equ    VIC_ADDR13, 0x134
                .equ    VIC_ADDR14, 0x138
                .equ    VIC_ADDR15, 0x13c

                .equ    VIC_CNTL, 0x200

                .equ    VIC_CNTL0, 0x200
                .equ    VIC_CNTL1, 0x204
                .equ    VIC_CNTL2, 0x208
                .equ    VIC_CNTL3, 0x20c
                .equ    VIC_CNTL4, 0x210
                .equ    VIC_CNTL5, 0x214
                .equ    VIC_CNTL6, 0x218
                .equ    VIC_CNTL7, 0x21c
                .equ    VIC_CNTL8, 0x220
                .equ    VIC_CNTL9, 0x224
                .equ    VIC_CNTL10, 0x228
                .equ    VIC_CNTL11, 0x22c
                .equ    VIC_CNTL12, 0x230
                .equ    VIC_CNTL13, 0x234
                .equ    VIC_CNTL14, 0x238
                .equ    VIC_CNTL15, 0x23c

                .equ    WDOG_INT, 0
                .equ    SOFTWARE_INT, 1
                .equ    COMM_RX_INT, 2
                .equ    COMM_TX_INT, 3
                .equ    TIMER1_INT, 4
                .equ    TIMER2_INT, 5
                .equ    CC_RDY_INT, 6
                .equ    CC_RPE_INT, 7
                .equ    CC_RFE_INT, 8
                .equ    CC_TFL_INT, 9
                .equ    CC_TOV_INT, 10
                .equ    CC_TMT_INT, 11
                .equ    DMA_DONE_INT, 12
                .equ    DMA_ERR_INT, 13
                .equ    DMA_TO_INT, 14
                .equ    RTR_DIAG_INT, 15
                .equ    RTR_DUMP_INT, 16
                .equ    RTR_ERR_INT, 17
                .equ    CPU_INT, 18
                .equ    ETH_TX_INT, 19
                .equ    ETH_RX_INT, 20
                .equ    ETH_PHY_INT, 21
                .equ    SLOW_CLK_INT, 22
                .equ    CC_TNF_INT, 23
                .equ    CC_MC_INT, 24
                .equ    CC_P2P_INT, 25
                .equ    CC_NN_INT, 26
                .equ    CC_FR_INT, 27
                .equ    INT0_INT, 28                      @ Pin INT[0]
                .equ    INT1_INT, 29                      @ Pin INT[1]
                .equ    GPIO8_INT, 30                      @ Pin GPIO[8]
                .equ    GPIO9_INT, 31                      @ Pin GPIO[9]

@------------------------------------------------------------------------------

@ DMA controller definitions

                .equ    DMA_BASE_UNBUF, 0x30000000
                .equ    DMA_BASE_BUF, 0x40000000

                .ifdef  BUF_WRITE
                .equ    DMA_BASE, DMA_BASE_BUF
                .else       
                .equ    DMA_BASE, DMA_BASE_UNBUF
                .endif      

                .equ    DMA_ADRS, 0x04
                .equ    DMA_ADRT, 0x08
                .equ    DMA_DESC, 0x0c
                .equ    DMA_CTRL, 0x10
                .equ    DMA_STAT, 0x14
                .equ    DMA_GCTL, 0x18
                .equ    DMA_CRCC, 0x1c
                .equ    DMA_CRCR, 0x20
                .equ    DMA_TMTV, 0x24
                .equ    DMA_SCTL, 0x28

                .equ    DMA_STAT0, 0x40
                .equ    DMA_STAT1, 0x44
                .equ    DMA_STAT2, 0x48
                .equ    DMA_STAT3, 0x4c
                .equ    DMA_STAT4, 0x50
                .equ    DMA_STAT5, 0x54
                .equ    DMA_STAT6, 0x58
                .equ    DMA_STAT7, 0x5c

                .equ    DMA_AD2S, 0x104
                .equ    DMA_AD2T, 0x108
                .equ    DMA_DES2, 0x10c

                .equ    DMA_CRCT, 0x180

@------------------------------------------------------------------------------

@ PL340 definitions

                .equ    PL340_BASE_UNBUF, 0xf0000000
                .equ    PL340_BASE_BUF, 0xe0000000

                .ifdef  BUF_WRITE
                .equ    PL340_BASE, PL340_BASE_BUF
                .else       
                .equ    PL340_BASE, PL340_BASE_UNBUF
                .endif      

                .equ    MC_STAT, 0x00
                .equ    MC_CMD, 0x04
                .equ    MC_DIRC, 0x08
                .equ    MC_MCFG, 0x0c

                .equ    MC_REFP, 0x10
                .equ    MC_CASL, 0x14
                .equ    MC_DQSS, 0x18
                .equ    MC_MRD, 0x1c
                .equ    MC_RAS, 0x20
                .equ    MC_RC, 0x24
                .equ    MC_RCD, 0x28
                .equ    MC_RFC, 0x2c
                .equ    MC_RP, 0x30
                .equ    MC_RRD, 0x34
                .equ    MC_WR, 0x38
                .equ    MC_WTR, 0x3c
                .equ    MC_XP, 0x40
                .equ    MC_XSR, 0x44
                .equ    MC_ESR, 0x48

                .equ    MC_MCFG2, 0x4c
                .equ    MC_MCFG3, 0x50

                .equ    MC_QOS0, 0x100
                .equ    MC_QOS1, 0x104
                .equ    MC_QOS2, 0x108
                .equ    MC_QOS3, 0x10c
                .equ    MC_QOS4, 0x110
                .equ    MC_QOS5, 0x114
                .equ    MC_QOS6, 0x118
                .equ    MC_QOS7, 0x11c
                .equ    MC_QOS8, 0x120
                .equ    MC_QOS9, 0x124
                .equ    MC_QOS10, 0x128
                .equ    MC_QOS11, 0x12c
                .equ    MC_QOS12, 0x130
                .equ    MC_QOS13, 0x134
                .equ    MC_QOS14, 0x138
                .equ    MC_QOS15, 0x13c

                .equ    MC_CCFG0, 0x200
                .equ    MC_CCFG1, 0x204
                .equ    MC_CCFG2, 0x208
                .equ    MC_CCFG3, 0x20c

                .equ    DLL_STATUS, 0x300
                .equ    DLL_CONFIG0, 0x304
                .equ    DLL_CONFIG1, 0x308

@------------------------------------------------------------------------------

@ Router definitions

                .equ    RTR_BASE_UNBUF, 0xf1000000
                .equ    RTR_BASE_BUF, 0xe1000000

                .ifdef  BUF_WRITE
                .equ    RTR_BASE, RTR_BASE_BUF
                .else       
                .equ    RTR_BASE, RTR_BASE_UNBUF
                .endif      

                .equ    RTR_CONTROL, 0x00
                .equ    RTR_STATUS, 0x04

                .equ    RTR_EHDR, 0x08
                .equ    RTR_EKEY, 0x0c
                .equ    RTR_EDAT, 0x10
                .equ    RTR_ESTAT, 0x14
                .equ    RTR_DHDR, 0x18
                .equ    RTR_DKEY, 0x1c
                .equ    RTR_DDAT, 0x20
                .equ    RTR_DLINK, 0x24
                .equ    RTR_DSTAT, 0x28
                .equ    RTR_DGEN, 0x2c

                .equ    RTR_FR, 0x84

                .equ    RTR_DGF0, 0x200
                .equ    RTR_DGF1, 0x204
                .equ    RTR_DGF2, 0x208
                .equ    RTR_DGF3, 0x20c
                .equ    RTR_DGF4, 0x210
                .equ    RTR_DGF5, 0x214
                .equ    RTR_DGF6, 0x218
                .equ    RTR_DGF7, 0x21c
                .equ    RTR_DGF8, 0x220
                .equ    RTR_DGF9, 0x224
                .equ    RTR_DGF10, 0x228
                .equ    RTR_DGF11, 0x22c
                .equ    RTR_DGF12, 0x230
                .equ    RTR_DGF13, 0x234
                .equ    RTR_DGF14, 0x238
                .equ    RTR_DGF15, 0x23c

                .equ    RTR_DGC0, 0x300
                .equ    RTR_DGC1, 0x304
                .equ    RTR_DGC2, 0x308
                .equ    RTR_DGC3, 0x30c
                .equ    RTR_DGC4, 0x310
                .equ    RTR_DGC5, 0x314
                .equ    RTR_DGC6, 0x318
                .equ    RTR_DGC7, 0x31c
                .equ    RTR_DGC8, 0x320
                .equ    RTR_DGC9, 0x324
                .equ    RTR_DGC10, 0x328
                .equ    RTR_DGC11, 0x32c
                .equ    RTR_DGC12, 0x330
                .equ    RTR_DGC13, 0x334
                .equ    RTR_DGC14, 0x338
                .equ    RTR_DGC15, 0x33c

                .equ    RTR_TST1, 0xf00
                .equ    RTR_TST2, 0xf04

                .equ    P2P_TABLE_SIZE, 8192
                .equ    MC_TABLE_SIZE, 1024

                .equ    MC_RAM_WIDTH, (NUM_CPUS + NUM_LINKS)
                .equ    MC_RAM_MASK, ((1 << MC_RAM_WIDTH) - 1)

                .equ    P2P_EPW, 8                       @ Entries per word
                .equ    P2P_LOG_EPW, 3                       @ Log of entries per word
                .equ    P2P_EMASK, (P2P_EPW-1)             @ Entries per word - 1
                .equ    P2P_BPE, 3                       @ Bits per entry
                .equ    P2P_BMASK, 7                       @ Mask for entry bits

                .equ    P2P_INIT, 0x00db6db6              @ All thrown away!

                .equ    RTR_MCRAM_BASE, (RTR_BASE + 0x00004000)
                .equ    RTR_MCRAM_TOP, (RTR_MCRAM_BASE + MC_TABLE_SIZE * 4)

                .equ    RTR_MCKEY_BASE, (RTR_BASE + 0x00008000)
                .equ    RTR_MCKEY_TOP, (RTR_MCKEY_BASE + MC_TABLE_SIZE * 4)

                .equ    RTR_MCMASK_BASE, (RTR_BASE + 0x0000c000)
                .equ    RTR_MCMASK_TOP, (RTR_MCMASK_BASE + MC_TABLE_SIZE * 4)

                .equ    RTR_P2P_BASE, (RTR_BASE + 0x00010000)
                .equ    RTR_P2P_TOP, (RTR_P2P_BASE + P2P_TABLE_SIZE * 4)

                .equ    MC_CAM_WIDTH, 32

@------------------------------------------------------------------------------

@ System controller definitions

                .equ    SYSCTL_BASE_UNBUF, 0xf2000000
                .equ    SYSCTL_BASE_BUF, 0xe2000000

                .ifdef  BUF_WRITE
                .equ    SYSCTL_BASE, SYSCTL_BASE_BUF
                .else       
                .equ    SYSCTL_BASE, SYSCTL_BASE_UNBUF
                .endif      

                .equ    SC_CODE, 0x5ec00000

                .equ    CHIP_ID_CODE, 0x59111012

                .equ    SC_CHIP_ID, 0x00
                .equ    SC_CPU_DIS, 0x04
                .equ    SC_SET_IRQ, 0x08
                .equ    SC_CLR_IRQ, 0x0c
                .equ    SC_SET_OK, 0x10
                .equ    SC_CPU_OK, 0x10
                .equ    SC_CLR_OK, 0x14

                .equ    SC_SOFT_RST_L, 0x18
                .equ    SC_HARD_RST_L, 0x1c
                .equ    SC_SUBS_RST_L, 0x20

                .equ    SC_SOFT_RST_P, 0x24
                .equ    SC_HARD_RST_P, 0x28
                .equ    SC_SUBS_RST_P, 0x2c

                .equ    SC_RST_CODE, 0x30
                .equ    SC_MON_ID, 0x34

                .equ    SC_MISC_CTRL, 0x38

                .equ    GPIO_RES, 0x3c

                .equ    GPIO_PORT, 0x40
                .equ    GPIO_DIR, 0x44
                .equ    GPIO_SET, 0x48
                .equ    GPIO_CLR, 0x4c
                .equ    GPIO_READ, 0x48

                .equ    SC_PLL1, 0x50
                .equ    SC_PLL2, 0x54

                .equ    SC_FLAG, 0x58
                .equ    SC_SETFLAG, 0x58
                .equ    SC_CLRFLAG, 0x5c

                .equ    SC_CLKMUX, 0x60
                .equ    SC_SLEEP, 0x64

                .equ    SC_TS0, 0x68
                .equ    SC_TS1, 0x6c
                .equ    SC_TS2, 0x70

                .equ    SC_ARB0, 0x080
                .equ    SC_TAS0, 0x100
                .equ    SC_TAC0, 0x180

                .equ    SC_LINK_DIS, 0x200

                .equ    RST_POR, 0
                .equ    RST_WDT, 1
                .equ    RST_USER, 2
                .equ    RST_SW, 3
                .equ    RST_WDI, 4

@------------------------------------------------------------------------------

@ Watchdog timer definitions

                .equ    WDOG_BASE_UNBUF, 0xf3000000
                .equ    WDOG_BASE_BUF, 0xe3000000

                .ifdef  BUF_WRITE
                .equ    WDOG_BASE, WDOG_BASE_BUF
                .else       
                .equ    WDOG_BASE, WDOG_BASE_UNBUF
                .endif      

                .equ    WD_LOAD, 0x00
                .equ    WD_COUNT, 0x04
                .equ    WD_CTRL, 0x08
                .equ    WD_INTCLR, 0x0c
                .equ    WD_RAWINT, 0x10
                .equ    WD_MSKINT, 0x14
                .equ    WD_LOCK, 0xc00

                .equ    WD_CODE, 0x1acce551

                .equ    WD_INT_B, 1
                .equ    WD_RST_B, 2

@------------------------------------------------------------------------------

@ Ethernet definitions

                .equ    ETH_BASE_UNBUF, 0xf4000000
                .equ    ETH_BASE_BUF, 0xe4000000

                .ifdef  BUF_WRITE
                .equ    ETH_BASE, ETH_BASE_BUF
                .else       
                .equ    ETH_BASE, ETH_BASE_UNBUF
                .endif      

                .equ    ETH_TX_BASE, (ETH_BASE + 0x0000)
                .equ    ETH_TX_SIZE, 0x0600
                .equ    ETH_TX_TOP, (ETH_TX_BASE + ETH_TX_SIZE)

                .equ    ETH_RX_BASE, (ETH_BASE + 0x4000)
                .equ    ETH_RX_SIZE, 0x0c00
                .equ    ETH_RX_TOP, (ETH_RX_BASE + ETH_RX_SIZE)

                .equ    ETH_RX_DESC_RAM, (ETH_BASE + 0x8000)
                .equ    ETH_REGS, (ETH_BASE + 0xc000)

                .equ    ETH_CONTROL, 0x00
                .equ    ETH_STATUS, 0x04
                .equ    ETH_TX_LEN, 0x08
                .equ    ETH_TX_CMD, 0x0c
                .equ    ETH_RX_CMD, 0x10
                .equ    ETH_MAC_LO, 0x14
                .equ    ETH_MAC_HI, 0x18
                .equ    ETH_PHY_CTRL, 0x1c
                .equ    ETH_INT_CLR, 0x20
                .equ    ETH_RX_BUF_RP, 0x24
                .equ    ETH_RX_DESC_RP, 0x2c

                .equ    ETH_TX_CLR, 0x01
                .equ    ETH_RX_CLR, 0x10

@ Bits in ETH_PHY_CTRL

                .equ    PHY_CTRL_NRST, 1
                .equ    PHY_CTRL_DIN, 2
                .equ    PHY_CTRL_DOUT, 4
                .equ    PHY_CTRL_OE, 8
                .equ    PHY_CTRL_CLK, 16

@------------------------------------------------------------------------------

@ Handy constants that point to hardware

@------------------------------------------------------------------------------

@ Spinnaker packet definitions

                .equ    PKT_MC, 0x00000000              @ Bits in control byte
                .equ    PKT_P2P, 0x00400000
                .equ    PKT_NN, 0x00800000              @ Normal NN
                .equ    PKT_NND, 0x00a00000              @ Peek/poke NN
                .equ    PKT_FR, 0x00c00000

                .equ    PKT_PL, 0x00020000              @ Payload bit

                .equ    PKT_MC_PL, (PKT_MC + PKT_PL)
                .equ    PKT_P2P_PL, (PKT_P2P + PKT_PL)
                .equ    PKT_NN_PL, (PKT_NN + PKT_PL)
                .equ    PKT_FR_PL, (PKT_FR + PKT_PL)

@------------------------------------------------------------------------------

@ Clock & PLL definitions

                .equ    CLK_XTAL_MHZ, 10                      @ Crystal frequency (MHz)

                .equ    PLL_260, 0x0007011a              @ Assuming 10 MHz in
                .equ    PLL_300, 0x0007011e              @
                .equ    PLL_330, 0x00070121              @
                .equ    PLL_400, 0x00070128              @

                .equ    PLL_LOCK_TIME, 80                      @ Microseconds

                .equ    PLL_CLK_SEL, 0x809488a5              @ CPU/2, SYS/3, RTR/3, MEM/1

@------------------------------------------------------------------------------

@ Bits in GPIO[31:0]

@ Serial ROM

                .equ    SERIAL_NCS, 0x00000020              @ Out
                .equ    SERIAL_CLK, 0x00000010              @ Out
                .equ    SERIAL_SI, 0x00000008              @ Out
                .equ    SERIAL_SO, 0x00000004              @ In

                .equ    SERIAL_OE, (SERIAL_NCS + SERIAL_CLK + SERIAL_SI)

@ On-chip SDRAM

                .equ    SDRAM_TQ, (1 << 31)
                .equ    SDRAM_DPD, (1 << 30)
                .equ    SDRAM_HERE, (1 << 29)

                .equ    JTAG_NTRST, (1 << 27)
                .equ    JTAG_TMS, (1 << 26)
                .equ    JTAG_TDI, (1 << 25)
                .equ    JTAG_TCK, (1 << 24)

@ Bits in MISC_CTRL

                .equ    JTAG_RTCK, (1 << 20)
                .equ    JTAG_TDO, (1 << 19)
                .equ    JTAG_INT, (1 << 15)

@ LEDs

                .equ    LED_0, 0x00000001              @ LED on bit 0

@------------------------------------------------------------------------------

@ ARM CPSR bits

                .equ    MODE_USER, 0x10
                .equ    MODE_FIQ, 0x11
                .equ    MODE_IRQ, 0x12
                .equ    MODE_SVC, 0x13
                .equ    MODE_ABT, 0x17
                .equ    MODE_UND, 0x1b
                .equ    MODE_SYS, 0x1f

                .equ    THUMB_BIT, 0x20

                .equ    IMASK_IRQ, 0x80
                .equ    IMASK_FIQ, 0x40
                .equ    IMASK_ALL, 0xc0

@------------------------------------------------------------------------------

                .endif      

