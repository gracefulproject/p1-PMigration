
README file for SpiNNaker Low-Level Software Tools - Release 1.30
=================================================================


1) Edit the setup file so that it points to your installations of
   ARM and/or GNU software development tools. Search for the
   string "EDIT HERE" to find the two edit points.

   The version of the GNU tools that is recommended is

     Sourcery CodeBench Lite - ARM EABI release 2013.05

   This can be downloaded from the SpiNNaker Wiki or directly
   from the Code Sourcery section of the Mentor Graphics site.


2) Source the setup file in the directory in which it lives

   > source ./setup


3) Go into the "sark" directory and make SARK for ARM and/or GNU

   > cd sark
   > ./make_arm
   > ./make_gnu
   > cd ..

   Note that you may see some compiler warnings during these builds.

     ARM: Warning: A1581W: Added 2 bytes of padding at address ...
     ARM: Warning: C3017W: cpsr may be used before being set
     GNU: warning: cast to pointer from integer of different size

   These are harmless and can be ignored.


4) Go into the "spin1_api" directory and make "spin1_api" for ARM
   and/or GNU

   > cd spin1_api
   > ./make_arm
   > ./make_gnu
   > cd ..


5) There is a generic make file ("app.make" in the "make" directory)
   which is used to build simple applications. There is a link to
   this file from each of the application example directories.

   You can edit some configuration options at the top of this file if
   the defaults differ from what you will normally want to use. The
   default is shown in brackets below. You can change

   APP - to select the default source file to build (APP=sark)

   GNU - to choose ARM or GNU tools (GNU=1)

   THUMB - to choose to generate ARM or Thumb code (THUMB=1)

   API - if you want link with "spin1_api" or not (API=1)

   GP - if your GNU binaries don't have names like "arm-none-eabi-gcc"
        (GP=arm-none-eabi)


6) Go into the "apps/hello" directory to build your first SpiNNaker app.

   > cd apps/hello
   > make APP=hello		# GNU tools
   > make APP=hello GNU=0 	# ARM tools

   This should make "hello.aplx", which is an executable file that
   you can load into SpiNNaker


7) Now start "tubotron" on your workstation to get output from
   the program as it runs

   > tubotron &

   Note that if you see this error message when you start "tubotron"

     failed to create socket: Address already in use

   it is usually because there is already a tubotron (or tubogrid)
   running and it needs exclusive use of a UDP port.


8) Now start "ybug" to bootstrap your SpiNNaker board and load and run
   the "hello" application. You'll need to know the IP address of your
   board to do this - here we'll use 192.168.240.253. You'll also need
   to know what type of board you are using - spin2, spin3 or spin4.
   If you aren't sure what state your board is in you should reset it
   by pressing the reset button.

   > ybug 192.168.240.253

   You should see a start-up message and then a prompt. At the prompt
   type the following. The "spin3.conf" filename should be replaced by
   the appropriate name for your board (eg spin4.conf).

   > boot scamp.boot spin3.conf
   > app_load hello.aplx . 1 16
   > ps

   This loads the code into core 1 on a single SpiNNaker chip and
   assigns it an application ID of 16. You should see a "Hello world"
   message in the Tubotron. The "ps" command displays the status of
   every core on the SpiNNaker chip.

   The "hello" application also sends output to an internal I/O buffer
   on the chip. You can see this by using the "iobuf" command and
   telling it which core's buffer to display

   > iobuf 1

   Finally, to clear the I/O buffer and stop the application you can
   use the "app_stop" command to remove all applications with a given
   ID and any resources they have used. Exit "ybug" with "quit"

   > app_stop 16
   > ps
   > quit


9) Now build a more complex application (called "simple"!) which runs on
   4 chips

   > cd ../simple
   > make APP=simple

   Start "ybug" again to load and run the code. There should be no
   need to run the "boot" command again. The command to load a program
   to multiple chips is "app_load" and it has to be told which chips
   ("all" for all of them), which core (just 1 again) and an application
   ID (17 this time)

   Because this application runs on multiple cores, the startup of the
   cores needs to be synchronised. When a core reaches its
   synchronisation point (or barrier) it enters a wait state known as
   SYNC0. To allow the cores to proceed beyond the barrier a "signal"
   has to be sent to all cores to cause them to proceed. The "app_sig"
   command is used to do this, sending the signal "sync0". In this
   example, the cores reach their barrier very quickly and so it is
   OK to send the signal immediately after the "app_load". In other
   cases, a delay may be necessary.

   > ybug 192.168.240.253
   > app_load simple.aplx all 1 17
   > ps
   > app_sig all 17 sync0
   > ps

   This program runs for around 10 seconds, flashing red LEDs as it goes.
   (Your board may not have red LEDs). Output from this example goes to
   the internal I/O buffer and you can view it with the "iobuf" command.
   You can clean up with "app_stop" again and quit "ybug".

   > iobuf 1
   > app_stop 17
   > ps
   > quit


10) There are some more examples in the "apps" directory. Each of these
    has a "xxx.ybug" file which contains the "ybug" commands to run the
    application. It also contains, as comments, the commands you need
    to use to build the application and start any visualisation programs
    that the application needs. These examples include

    hello - Hello World (as above)

    simple - a contrived demo of the SpiNNaker API

    data_abort - causes a data abort to demonstrate debugging

    interrupt - demonstrates a bare-metal interrupt handler

    ring - shows how to set up routing tables for core-to-core comms

    random - random number generation and simple graphics

    pt_demo - a path tracing program - quite complex - see its own README

    heat_demo - a heat diffusion example (precompiled Linux visualiser)


11) There is documentation for SARK, "ybug" and the Spin1 API in the
    "docs" directory.

12) SpiNNaker systems mostly communicate using UDP/IP with port numbers
    in the range 17890-17899. Specifically, 17892 is used for Tubotron
    and Tubogrid, 17893 is used by SpiNNaker (eg by "ybug") and 17894
    is often used by visualisers. If you have a firewall blocking any
    of these ports, you may encounter problems and it's worth checking
    the firewall before blaming anything else!

    Similarly, you may only have one visualiser (such as Tubotron) on
    each port at any one time. So you may see a mesage to the effect
    that the port is in use if you try to start a visualiser when one
    is already running and using the same port.
